#  --- Day 3: Binary Diagnostic ---
#  --- Part Two ---
#  Next, you should verify the life support rating, which can be determined by multiplying the oxygen generator rating by the CO2 scrubber rating.

#  Both the oxygen generator rating and the CO2 scrubber rating are values that can be found in your diagnostic report - finding them is the tricky part.
#  Both values are located using a similar process that involves filtering out values until only one remains.
#  Before searching for either rating value, start with the full list of binary numbers from your diagnostic report and consider just the first bit of those numbers. Then:

#  Keep only numbers selected by the bit criteria for the type of rating value for which you are searching. Discard numbers which do not match the bit criteria.
#  If you only have one number left, stop; this is the rating value for which you are searching.
#  Otherwise, repeat the process, considering the next bit to the right.
#  The bit criteria depends on which type of rating value you want to find:

#  To find oxygen generator rating, determine the most common value (0 or 1) in the current bit position, and keep only numbers with that bit in that position.
#  If 0 and 1 are equally common, keep values with a 1 in the position being considered.

#  To find CO2 scrubber rating, determine the least common value (0 or 1) in the current bit position, and keep only numbers with that bit in that position.
#  If 0 and 1 are equally common, keep values with a 0 in the position being considered.
#  For example, to determine the oxygen generator rating value using the same example diagnostic report from above:

#  Start with all 12 numbers and consider only the first bit of each number.
#  There are more 1 bits (7) than 0 bits (5), so keep only the 7 numbers with a 1 in the first position: 11110, 10110, 10111, 10101, 11100, 10000, and 11001.
#  Then, consider the second bit of the 7 remaining numbers: there are more 0 bits (4) than 1 bits (3), so keep only the 4 numbers with a 0 in the second position: 10110, 10111, 10101, and 10000.
#  In the third position, three of the four numbers have a 1, so keep those three: 10110, 10111, and 10101.
#  In the fourth position, two of the three numbers have a 1, so keep those two: 10110 and 10111.
#  In the fifth position, there are an equal number of 0 bits and 1 bits (one each). So, to find the oxygen generator rating, keep the number with a 1 in that position: 10111.
#  As there is only one number left, stop; the oxygen generator rating is 10111, or 23 in decimal.
#  Then, to determine the CO2 scrubber rating value from the same example above:

#  Start again with all 12 numbers and consider only the first bit of each number.
#  There are fewer 0 bits (5) than 1 bits (7), so keep only the 5 numbers with a 0 in the first position: 00100, 01111, 00111, 00010, and 01010.
#  Then, consider the second bit of the 5 remaining numbers: there are fewer 1 bits (2) than 0 bits (3), so keep only the 2 numbers with a 1 in the second position: 01111 and 01010.
#  In the third position, there are an equal number of 0 bits and 1 bits (one each). So, to find the CO2 scrubber rating, keep the number with a 0 in that position: 01010.
#  As there is only one number left, stop; the CO2 scrubber rating is 01010, or 10 in decimal.
#  Finally, to find the life support rating, multiply the oxygen generator rating (23) by the CO2 scrubber rating (10) to get 230.

#  Use the binary numbers in your diagnostic report to calculate the oxygen generator rating and CO2 scrubber rating, then multiply them together.
#  What is the life support rating of the submarine? (Be sure to represent your answer in decimal, not binary.)

#init vars
list=[]
temp_list=[]
count=0
total_elements=0
total_ones=0
working_list=[]
#	print(i)
	
#print(bit)
#read a record
file1 = open('Day3Input.txt', 'r')

for line in file1:
	diag=line.strip('\n')
	list.append(diag)
	count+=1
#	print(list)

working_list=list.copy()

#get #of element
#count #1
#find is most common
# go through list get the most common
for char in range(0,13):
	num_elements=len(working_list)
	total_ones=0
	for i,j in enumerate(working_list):
		string=working_list[i]                        # get element from list
		bit=int(string[char])                 # get bit of element
		total_ones=total_ones+bit
	if total_ones>=num_elements/2:
		keep=1
	else:
		keep=0
	for i,j in enumerate(working_list):
		string=working_list[i]                        # get element from list
		bit=int(string[char]) 
		if bit==keep:
			temp_list.append(string)
	num_elements2=len(temp_list)
	if len(temp_list)==1:
		print("break", temp_list)
		break
	working_list=temp_list.copy()
	temp_list=[]
working_list=temp_list.copy()

oxygen=working_list[0]
print(working_list)


for line in file1:
	diag=line.strip('\n')
	list.append(diag)
	count+=1


working_list=list.copy()

print()
print()
#get #of element
#count #1
#find is most common
# go through list get the most common
for char in range(0,13):
	num_elements=len(working_list)
	total_ones=0
	for i,j in enumerate(working_list):
		string=working_list[i]                        # get element from list
		bit=int(string[char])                 # get bit of element
		total_ones=total_ones+bit
	if total_ones<num_elements/2:
		keep=1
	else:
		keep=0
	for i,j in enumerate(working_list):
		string=working_list[i]                        # get element from list
		bit=int(string[char]) 
		if bit==keep:
			temp_list.append(string)
	num_elements2=len(temp_list)
	if len(temp_list)==1:
		print("break", temp_list)
		break
	working_list=temp_list.copy()
	temp_list=[]
working_list=temp_list.copy()
	
co2=working_list[0]
print(working_list)

co2=str(co2)
oxygen=str(oxygen)

dec_co2= int(co2, 2)
dec_oxygen= int(oxygen, 2)

print("AdventOfCode 2021: Puzzle 6")
print("Oxygen: ", oxygen, "->", dec_oxygen, "CO2: ", co2, "->", dec_co2, "Life support: ", dec_co2*dec_oxygen)

#841
#3384
#2845944
